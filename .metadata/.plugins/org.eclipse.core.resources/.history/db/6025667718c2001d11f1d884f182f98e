package trainReservation;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import trainReservation.dto.GetTrainListDto;
import trainReservation.entity.Cost;
import trainReservation.entity.Seat;
import trainReservation.entity.StopStation;
import trainReservation.entity.Train;

public class MainApplication {
	
	private static List<Train> trains = new ArrayList<Train>();
	private static List<Cost> costs = new ArrayList<Cost>();
	
	private static DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
	
	public static void main(String[] args) {

		
//		모든 프로세스, 메서드, 함수의 적용되는 garbage가 들어가면 garbage값이 나옴
		
		while (true) {
			GetTrainListDto dto = new GetTrainListDto();
			
			LocalTime departureTime = null;
			
			if (dto.isEmpty()) {
				System.out.println("모두 입력하세요.");
				continue;
			}
			
			try {
				departureTime = LocalTime.parse(dto.getDepartureTime(), timeFormatter);
			} catch (Exception exception) {
				System.out.println("잘못된 시간입니다.");
			}
			
			if (dto.getNumberOfPeople() <= 0) {
				System.out.println("잘못된 인원입니다.");
				continue;
			}
			
			if (dto.isEqualStation()) {
				System.out.println("출발역과 도착역이 같습니다.");
				continue;
			}
			
			List<Train> possibleTrains = new ArrayList<>();
			
//			조회만 할거라서 for-each씀
			for (Train train : trains) {
				
				List<StopStation> stopStations = train.getStopStations();
				int sameStationIndex = -1;
//				검색하는 용도
				
				for (int stopStationIndex = 0; stopStationIndex < stopStations.size(); stopStationIndex++) {
					String stopStationName = stopStations.get(stopStationIndex).getStationName();
					if (!dto.isEqualDepartureStation(stopStationName)) {
						continue;
					}
					
					LocalTime stationDepartureTime = LocalTime.parse(dto.getDepartureTime(), timeFormatter);
					
					if (stationDepartureTime.isBefore(departureTime)) {
//						입력한 시간 전에 출발하는 기차이면 검색할 필요 없으므로 break 해줌
						break;
					}
//					출발				도착
					sameStationIndex = stopStationIndex;	
//					동일한 정거장이 존재하면 sameStationIndex를 변경
					break;
				}
				
				if (sameStationIndex == -1) {
//					sameStationIndex가 -1이면 기차가 해당 정거장을 거치지 않거나 이전 정거장이다.
					continue;
				}
				
				boolean isPossible = false;
				
				for (int stopStationIndex = 0; stopStationIndex < stopStations.size(); stopStationIndex++) {
					
					String stationName = stopStations.get(stopStationIndex).getStationName();
					
					if (!dto.isEqualArrivalStation(stationName)) {
						continue;
					}
					
					if (stopStationIndex < sameStationIndex) {
						break;
					}
					
					isPossible = true;
					break;
				}
				
				if (!isPossible) {
					continue;
				}
				
				List<Seat> seats = train.getSeats();
				
				int possibleSeatCount = 0;
				
//				가져오는 용도로만 씀
				for (Seat seat : seats) {
					if (!seat.isSeatStatus()) {
						possibleSeatCount++;
					}
				}
				
				if (possibleSeatCount < dto.getNumberOfPeople()) {
					continue;
				}
				
				possibleTrains.add(train);
				
			}
			System.out.println(possibleTrains.toString());
		}
	}
	
	
}
