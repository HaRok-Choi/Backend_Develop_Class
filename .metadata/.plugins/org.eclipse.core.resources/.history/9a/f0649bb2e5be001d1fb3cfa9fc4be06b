package chapter06.A_CollectionClass;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;

// Collection Framework
// 배열 형태의 데이터를 보다 편하게 사용할 수 있도록 해주는 클래스의 집합

public class CollectionClass {
	public static void main(String[] args) {
		
//		Set 클래스
//		집합 - 중복을 허용하지 않고 순서가 없는 형태
//		순서가 없기에 index 사용 불가능
		
//		HashSet<E> : 중복을 허용하지 않고 순서가 없는 형태, 정렬x
		Set<Integer> integerSet = new HashSet<>();
		integerSet.add(4859);
		integerSet.add(459);
		integerSet.add(48);
		integerSet.add(859);
		integerSet.add(859);
		integerSet.add(32324859);
		
		Iterator<Integer> iterator = integerSet.iterator();
//		일반적으로 while문 씀
		while (iterator.hasNext()) {
//			System.out.println(iterator.next());
		}
		
//		for-each도 됨
		for (Integer item : integerSet) {
//			System.out.println(item);
		}
		System.out.println();
		
//		TreeSet<E> : 중복을 허용하지 않고 순서가 없는 형태, 정렬o
		Set<Integer> treeSet = new TreeSet<Integer>();
		treeSet.add(4859);
		treeSet.add(459);
		treeSet.add(48);
		treeSet.add(859);
		treeSet.add(859);
		treeSet.add(32324859);
		
		for (Integer item : treeSet) {
//			System.out.println(item);
		}
		
		System.out.println("====================================================");
		
//		List
//		데이터가 일렬로 나열한 구조
//		순서가 존재하고 중복이 허용 (배열)
		
//		ArrayList<E> : 순서가 존재하고 중복이 허용된 '배열'
		List<String> list = new ArrayList<>();
		list.add("apple");
		list.add(0, "banana");	// 추가하는 것
		
		list.set(0, "BaNaNa");	// 특정 index의 값을 바꿈
		
		list.remove(1);	// 반환을 해줌
		
		System.out.println(list.toString());
		
		for (int index = 0; index < list.size(); index++) {
			System.out.println(list.get(index));
		}
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
